// <auto-generated/>
#nullable enable
namespace Pochteca;

/// <summary>
/// Minimal request facts needed for unit calculation and event shaping.
/// </summary>
public record RequestInfo
{
    /// <summary>
    /// The logical method or verb of the request (e.g., "POST", "GET").
    /// </summary>
    public string Method { get; init; }

    /// <summary>
    /// The logical path or resource identifier for the request.
    /// </summary>
    public string Path { get; init; }

    /// <summary>
    /// The UTC timestamp when the request was handled.
    /// </summary>
    public DateTimeOffset TimestampUtc { get; init; }

    /// <summary>
    /// The stable endpoint key representing the logical action.
    /// </summary>
    public EndpointKey Endpoint { get; init; }

    /// <summary>
    /// The final response status code associated with this request.
    /// </summary>
    public int StatusCode { get; init; }

    /// <summary>
    /// Arbitrary items used for unit calculation (e.g., counts, sizes).
    /// </summary>
    public IReadOnlyDictionary<string, object?> Items { get; init; }

    /// <summary>
    /// Initializes a new instance of the <see cref="RequestInfo"/> record.
    /// </summary>
    /// <param name="method">The logical method or verb of the request.</param>
    /// <param name="path">The logical path or resource identifier.</param>
    /// <param name="timestampUtc">The UTC timestamp when the request was handled.</param>
    /// <param name="endpoint">The stable endpoint key representing the logical action.</param>
    /// <param name="statusCode">The final response status code associated with this request.</param>
    /// <param name="items">Arbitrary items used for unit calculation.</param>
    public RequestInfo(string method, string path, DateTimeOffset timestampUtc, EndpointKey endpoint, int statusCode, IReadOnlyDictionary<string, object?> items)
    {
        Method = method;
        Path = path;
        TimestampUtc = timestampUtc;
        Endpoint = endpoint;
        StatusCode = statusCode;
        Items = items;
    }
}

/// <summary>
/// Result of computing billable units for a request.
/// </summary>
public record UnitsResult
{
    /// <summary>
    /// The computed units (decimal to allow fractional values).
    /// </summary>
    public decimal Units { get; init; }

    /// <summary>
    /// An optional human-readable explanation (e.g., "rule:schedule.v1").
    /// </summary>
    public string? Reason { get; init; }

    /// <summary>
    /// An optional stable identifier for the rule used to compute units.
    /// </summary>
    public string? RuleId { get; init; }

    /// <summary>
    /// Initializes a new instance of the <see cref="UnitsResult"/> record.
    /// </summary>
    /// <param name="units">The computed units.</param>
    /// <param name="reason">An optional human-readable explanation.</param>
    /// <param name="ruleId">An optional rule identifier.</param>
    public UnitsResult(decimal units, string? reason = null, string? ruleId = null)
    {
        Units = units;
        Reason = reason;
        RuleId = ruleId;
    }
}

/// <summary>
/// Declarative rule for computing units: BaseUnits + (PerItemUnit Ã— quantity from Items[ItemKey]).
/// </summary>
public record UnitRule
{
    /// <summary>
    /// A stable identifier for this rule (e.g., "schedule.v1").
    /// </summary>
    public string Id { get; init; }

    /// <summary>
    /// A prefix that can match <see cref="RequestInfo.Endpoint"/> or <see cref="RequestInfo.Path"/>.
    /// </summary>
    public string EndpointPrefix { get; init; }

    /// <summary>
    /// The base units applied for any matching request.
    /// </summary>
    public decimal BaseUnits { get; init; }

    /// <summary>
    /// Optional per-item unit multiplier.
    /// </summary>
    public decimal? PerItemUnit { get; init; }

    /// <summary>
    /// Optional item key used to read a quantity from <see cref="RequestInfo.Items"/>.
    /// </summary>
    public string? ItemKey { get; init; }

    /// <summary>
    /// Optional version number for the rule definition (default = 1).
    /// </summary>
    public int Version { get; init; }

    /// <summary>
    /// Initializes a new instance of the <see cref="UnitRule"/> record.
    /// </summary>
    /// <param name="id">A stable identifier for this rule (e.g., "schedule.v1").</param>
    /// <param name="endpointPrefix">A prefix matching endpoint key or path.</param>
    /// <param name="baseUnits">The base units applied for any matching request.</param>
    /// <param name="perItemUnit">Optional per-item unit multiplier.</param>
    /// <param name="itemKey">Optional item key to read quantity from <see cref="RequestInfo.Items"/>.</param>
    /// <param name="version">Optional version number for the rule (default = 1).</param>
    public UnitRule(string id, string endpointPrefix, decimal baseUnits, decimal? perItemUnit = null, string? itemKey = null, int version = 1)
    {
        Id = id;
        EndpointPrefix = endpointPrefix;
        BaseUnits = baseUnits;
        PerItemUnit = perItemUnit;
        ItemKey = itemKey;
        Version = version;
    }
}

/// <summary>
/// Immutable usage record emitted to downstream billing or cost aggregation pipelines.
/// </summary>
public record UsageEvent
{
    /// <summary>
    /// The unique identifier for this usage event.
    /// </summary>
    public Guid EventId { get; init; }

    /// <summary>
    /// The party financially responsible for this usage.
    /// </summary>
    public TenantId Payer { get; init; }

    /// <summary>
    /// The stable endpoint key representing the logical action.
    /// </summary>
    public EndpointKey Endpoint { get; init; }

    /// <summary>
    /// The computed usage units.
    /// </summary>
    public decimal Units { get; init; }

    /// <summary>
    /// The UTC timestamp when the event occurred (typically when the request completed).
    /// </summary>
    public DateTimeOffset OccurredUtc { get; init; }

    /// <summary>
    /// The per-request correlation identifier.
    /// </summary>
    public RequestId RequestId { get; init; }

    /// <summary>
    /// The optional idempotency key used for deduplication of mutations.
    /// </summary>
    public IdempotencyKey? IdempotencyKey { get; init; }

    /// <summary>
    /// Optional subject of the work (e.g., the tenant or resource the operation is about).
    /// </summary>
    public TenantId? Subject { get; init; }

    /// <summary>
    /// Optional reseller or partner associated with the usage.
    /// </summary>
    public string? Sponsor { get; init; }

    /// <summary>
    /// Indicates whether this event is billable (true) or cost-only/internal (false).
    /// </summary>
    public bool Billable { get; init; }

    /// <summary>
    /// Optional stable identifier for the rule used to produce units.
    /// </summary>
    public string? RuleId { get; init; }

    /// <summary>
    /// Optional calculation engine/version that produced <see cref="Units"/>.
    /// </summary>
    public string? CalcVersion { get; init; }

    /// <summary>
    /// Optional echo of the associated HTTP status code for analytics.
    /// </summary>
    public int? StatusCode { get; init; }

    /// <summary>
    /// Optional metadata for downstream enrichment.
    /// </summary>
    public IReadOnlyDictionary<string, string>? Metadata { get; init; }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsageEvent"/> record.
    /// </summary>
    /// <param name="eventId">The unique identifier for this usage event.</param>
    /// <param name="payer">The party financially responsible for this usage.</param>
    /// <param name="endpoint">The stable endpoint key representing the logical action.</param>
    /// <param name="units">The computed usage units.</param>
    /// <param name="occurredUtc">The UTC timestamp when the event occurred.</param>
    /// <param name="requestId">The per-request correlation identifier.</param>
    /// <param name="idempotencyKey">The optional idempotency key used for deduplication.</param>
    /// <param name="subject">Optional subject of the work.</param>
    /// <param name="sponsor">Optional reseller or partner.</param>
    /// <param name="billable">Indicates whether this event is billable (default = true).</param>
    /// <param name="ruleId">Optional stable identifier for the rule used.</param>
    /// <param name="calcVersion">Optional calculation engine/version.</param>
    /// <param name="statusCode">Optional echo of the associated HTTP status code.</param>
    /// <param name="metadata">Optional metadata for downstream enrichment.</param>
    public UsageEvent(
        Guid eventId,
        TenantId payer,
        EndpointKey endpoint,
        decimal units,
        DateTimeOffset occurredUtc,
        RequestId requestId,
        IdempotencyKey? idempotencyKey,
        TenantId? subject = null,
        string? sponsor = null,
        bool billable = true,
        string? ruleId = null,
        string? calcVersion = null,
        int? statusCode = null,
        IReadOnlyDictionary<string, string>? metadata = null)
    {
        EventId = eventId;
        Payer = payer;
        Endpoint = endpoint;
        Units = units;
        OccurredUtc = occurredUtc;
        RequestId = requestId;
        IdempotencyKey = idempotencyKey;
        Subject = subject;
        Sponsor = sponsor;
        Billable = billable;
        RuleId = ruleId;
        CalcVersion = calcVersion;
        StatusCode = statusCode;
        Metadata = metadata;
    }
}

/// <summary>
/// Batch item used by <see cref="IUsageMeter"/> for multi-operation recording.
/// </summary>
public record UsageBatchItem
{
    /// <summary>
    /// The request information used to calculate units.
    /// </summary>
    public RequestInfo Request { get; init; }

    /// <summary>
    /// The optional idempotency key for deduplication.
    /// </summary>
    public IdempotencyKey? IdempotencyKey { get; init; }

    /// <summary>
    /// The per-request correlation identifier.
    /// </summary>
    public RequestId RequestId { get; init; }

    /// <summary>
    /// Indicates whether this usage is billable (true) or cost-only/internal (false).
    /// </summary>
    public bool Billable { get; init; }

    /// <summary>
    /// Optional subject of the work (e.g., tenant/resource).
    /// </summary>
    public TenantId? Subject { get; init; }

    /// <summary>
    /// Optional reseller or partner associated with the usage.
    /// </summary>
    public string? Sponsor { get; init; }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsageBatchItem"/> record.
    /// </summary>
    /// <param name="request">The request information used to calculate units.</param>
    /// <param name="idempotencyKey">The optional idempotency key for deduplication.</param>
    /// <param name="requestId">The per-request correlation identifier.</param>
    /// <param name="billable">Indicates whether this usage is billable (default = true).</param>
    /// <param name="subject">Optional subject of the work.</param>
    /// <param name="sponsor">Optional reseller or partner.</param>
    public UsageBatchItem(RequestInfo request, IdempotencyKey? idempotencyKey, RequestId requestId, bool billable = true, TenantId? subject = null, string? sponsor = null)
    {
        Request = request;
        IdempotencyKey = idempotencyKey;
        RequestId = requestId;
        Billable = billable;
        Subject = subject;
        Sponsor = sponsor;
    }
}
